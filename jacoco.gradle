// Android Gradle Plugin out of the box only supports code coverage for instrumentation espresso) tests.
// This add support for unit tests as well.
apply plugin: 'jacoco'

tasks.withType(Test) {
//    jacoco.includeNoLocationClasses = true//hmm this make our unit test failed???
//    jacoco.excludes = ['jdk.internal.*']
    // see related issue https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
}

def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        'androidx/**/*.*','**/*$Lambda$*.*',
        '**/*$Lambda$*.*',
        '**/*$Companion*.*',

        //Dagger 2
        '**/*Dagger*Component*.*',
        '**/*Module.*',
        '**/*Module$*.*',
        '**/*MembersInjector*.*',
        '**/*_Factory*.*',
        '**/*Provide*Factory*.*',
        '**/dagger/hilt/**/*.*',
        '**/hilt_*/**/*.*',
        '**/hilt_*.*',

        //binding
        '**/com/linhphan/presentation/DataBinder*',
        '**/com/linhphan/presentation/DataBinding*',
        '**/databinding/*',
        '**/databinding*',
        '**/DataBinder*/**/*.*',
        '**/*BR*.*',

        //Autofactory
        '**/*Factory.*',
        '**/*Builder.*',
        '**/*Builder*.*',
        '**/*$*.*',//anonymous class
        '**/*$*$*.*', // Anonymous classes generated by kotlin

        //Classes I intentionally don't want to test
        '**/com/linhphan/presentation/WeatherForecastApp.*',
        '**/*Activity.*',
        '**/App.class',
        '**/*Adapter.*',
        '**/*ViewHolder*.*',
        '**/com/linhphan/presentation/model/*',
        '**/com/linhphan/data/entity/**/*.*',
        '**/com/linhphan/data/local/*_Impl*',
        '**/com/linhphan/presentation/generated/callback/*.*',
]

task testDebugUnitTestCoverage(type: JacocoReport) {
    group = 'Reporting'
    description = "Generate Jacoco coverage reports for the debug build. Only unit tests."

    //Make sure that tests from all modules are run before coverage report
//    dependsOn "testDebugUnitTest"
    dependsOn 'createDebugCoverageReport'

    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file("${rootProject.buildDir}/coverage-report")
    }

    def javaClasses = []
    def kotlinClasses = []
    def javaSrc = []
    def kotlinSrc = []
    def execution = []
    rootProject.subprojects.each { proj ->
        javaClasses << fileTree(dir: "$proj.buildDir/intermediates/javac/debug", excludes: fileFilter)
        kotlinClasses << fileTree(dir: "$proj.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
        javaSrc << "$proj.projectDir/src/main/java"
        kotlinSrc << "$proj.projectDir/src/main/kotlin"
        execution << fileTree(dir: proj.buildDir, includes: [
                'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'])
    }
    getSourceDirectories().setFrom(files([javaSrc, kotlinSrc]))
    getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))
    getExecutionData().setFrom(execution)

    doLast() {
        print "file://${reports.html.destination}/index.html:\n"
    }
}